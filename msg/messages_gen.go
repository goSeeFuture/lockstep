package msg

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *Direction) DecodeMsg(dc *msgp.Reader) (err error) {
	{
		var zb0001 int
		zb0001, err = dc.ReadInt()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = Direction(zb0001)
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z Direction) EncodeMsg(en *msgp.Writer) (err error) {
	err = en.WriteInt(int(z))
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z Direction) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	o = msgp.AppendInt(o, int(z))
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Direction) UnmarshalMsg(bts []byte) (o []byte, err error) {
	{
		var zb0001 int
		zb0001, bts, err = msgp.ReadIntBytes(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		(*z) = Direction(zb0001)
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z Direction) Msgsize() (s int) {
	s = msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Join) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 1 {
		err = msgp.ArrayError{Wanted: 1, Got: zb0001}
		return
	}
	z.Account, err = dc.ReadString()
	if err != nil {
		err = msgp.WrapError(err, "Account")
		return
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z Join) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 1
	err = en.Append(0x91)
	if err != nil {
		return
	}
	err = en.WriteString(z.Account)
	if err != nil {
		err = msgp.WrapError(err, "Account")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z Join) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 1
	o = append(o, 0x91)
	o = msgp.AppendString(o, z.Account)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Join) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 1 {
		err = msgp.ArrayError{Wanted: 1, Got: zb0001}
		return
	}
	z.Account, bts, err = msgp.ReadStringBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Account")
		return
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z Join) Msgsize() (s int) {
	s = 1 + msgp.StringPrefixSize + len(z.Account)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *JoinReply) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 2 {
		err = msgp.ArrayError{Wanted: 2, Got: zb0001}
		return
	}
	z.Result, err = dc.ReadBool()
	if err != nil {
		err = msgp.WrapError(err, "Result")
		return
	}
	z.Message, err = dc.ReadString()
	if err != nil {
		err = msgp.WrapError(err, "Message")
		return
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z JoinReply) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 2
	err = en.Append(0x92)
	if err != nil {
		return
	}
	err = en.WriteBool(z.Result)
	if err != nil {
		err = msgp.WrapError(err, "Result")
		return
	}
	err = en.WriteString(z.Message)
	if err != nil {
		err = msgp.WrapError(err, "Message")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z JoinReply) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 2
	o = append(o, 0x92)
	o = msgp.AppendBool(o, z.Result)
	o = msgp.AppendString(o, z.Message)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *JoinReply) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 2 {
		err = msgp.ArrayError{Wanted: 2, Got: zb0001}
		return
	}
	z.Result, bts, err = msgp.ReadBoolBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Result")
		return
	}
	z.Message, bts, err = msgp.ReadStringBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Message")
		return
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z JoinReply) Msgsize() (s int) {
	s = 1 + msgp.BoolSize + msgp.StringPrefixSize + len(z.Message)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Message) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 3 {
		err = msgp.ArrayError{Wanted: 3, Got: zb0001}
		return
	}
	z.Step, err = dc.ReadInt64()
	if err != nil {
		err = msgp.WrapError(err, "Step")
		return
	}
	{
		var zb0002 int
		zb0002, err = dc.ReadInt()
		if err != nil {
			err = msgp.WrapError(err, "Direction")
			return
		}
		z.Direction = Direction(zb0002)
	}
	z.ID, err = dc.ReadString()
	if err != nil {
		err = msgp.WrapError(err, "ID")
		return
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z Message) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 3
	err = en.Append(0x93)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.Step)
	if err != nil {
		err = msgp.WrapError(err, "Step")
		return
	}
	err = en.WriteInt(int(z.Direction))
	if err != nil {
		err = msgp.WrapError(err, "Direction")
		return
	}
	err = en.WriteString(z.ID)
	if err != nil {
		err = msgp.WrapError(err, "ID")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z Message) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 3
	o = append(o, 0x93)
	o = msgp.AppendInt64(o, z.Step)
	o = msgp.AppendInt(o, int(z.Direction))
	o = msgp.AppendString(o, z.ID)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Message) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 3 {
		err = msgp.ArrayError{Wanted: 3, Got: zb0001}
		return
	}
	z.Step, bts, err = msgp.ReadInt64Bytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Step")
		return
	}
	{
		var zb0002 int
		zb0002, bts, err = msgp.ReadIntBytes(bts)
		if err != nil {
			err = msgp.WrapError(err, "Direction")
			return
		}
		z.Direction = Direction(zb0002)
	}
	z.ID, bts, err = msgp.ReadStringBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "ID")
		return
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z Message) Msgsize() (s int) {
	s = 1 + msgp.Int64Size + msgp.IntSize + msgp.StringPrefixSize + len(z.ID)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *MessageReply) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 1 {
		err = msgp.ArrayError{Wanted: 1, Got: zb0001}
		return
	}
	var zb0002 uint32
	zb0002, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err, "Commands")
		return
	}
	if cap(z.Commands) >= int(zb0002) {
		z.Commands = (z.Commands)[:zb0002]
	} else {
		z.Commands = make([][]*Message, zb0002)
	}
	for za0001 := range z.Commands {
		var zb0003 uint32
		zb0003, err = dc.ReadArrayHeader()
		if err != nil {
			err = msgp.WrapError(err, "Commands", za0001)
			return
		}
		if cap(z.Commands[za0001]) >= int(zb0003) {
			z.Commands[za0001] = (z.Commands[za0001])[:zb0003]
		} else {
			z.Commands[za0001] = make([]*Message, zb0003)
		}
		for za0002 := range z.Commands[za0001] {
			if dc.IsNil() {
				err = dc.ReadNil()
				if err != nil {
					err = msgp.WrapError(err, "Commands", za0001, za0002)
					return
				}
				z.Commands[za0001][za0002] = nil
			} else {
				if z.Commands[za0001][za0002] == nil {
					z.Commands[za0001][za0002] = new(Message)
				}
				err = z.Commands[za0001][za0002].DecodeMsg(dc)
				if err != nil {
					err = msgp.WrapError(err, "Commands", za0001, za0002)
					return
				}
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *MessageReply) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 1
	err = en.Append(0x91)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Commands)))
	if err != nil {
		err = msgp.WrapError(err, "Commands")
		return
	}
	for za0001 := range z.Commands {
		err = en.WriteArrayHeader(uint32(len(z.Commands[za0001])))
		if err != nil {
			err = msgp.WrapError(err, "Commands", za0001)
			return
		}
		for za0002 := range z.Commands[za0001] {
			if z.Commands[za0001][za0002] == nil {
				err = en.WriteNil()
				if err != nil {
					return
				}
			} else {
				err = z.Commands[za0001][za0002].EncodeMsg(en)
				if err != nil {
					err = msgp.WrapError(err, "Commands", za0001, za0002)
					return
				}
			}
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *MessageReply) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 1
	o = append(o, 0x91)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Commands)))
	for za0001 := range z.Commands {
		o = msgp.AppendArrayHeader(o, uint32(len(z.Commands[za0001])))
		for za0002 := range z.Commands[za0001] {
			if z.Commands[za0001][za0002] == nil {
				o = msgp.AppendNil(o)
			} else {
				o, err = z.Commands[za0001][za0002].MarshalMsg(o)
				if err != nil {
					err = msgp.WrapError(err, "Commands", za0001, za0002)
					return
				}
			}
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *MessageReply) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 1 {
		err = msgp.ArrayError{Wanted: 1, Got: zb0001}
		return
	}
	var zb0002 uint32
	zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Commands")
		return
	}
	if cap(z.Commands) >= int(zb0002) {
		z.Commands = (z.Commands)[:zb0002]
	} else {
		z.Commands = make([][]*Message, zb0002)
	}
	for za0001 := range z.Commands {
		var zb0003 uint32
		zb0003, bts, err = msgp.ReadArrayHeaderBytes(bts)
		if err != nil {
			err = msgp.WrapError(err, "Commands", za0001)
			return
		}
		if cap(z.Commands[za0001]) >= int(zb0003) {
			z.Commands[za0001] = (z.Commands[za0001])[:zb0003]
		} else {
			z.Commands[za0001] = make([]*Message, zb0003)
		}
		for za0002 := range z.Commands[za0001] {
			if msgp.IsNil(bts) {
				bts, err = msgp.ReadNilBytes(bts)
				if err != nil {
					return
				}
				z.Commands[za0001][za0002] = nil
			} else {
				if z.Commands[za0001][za0002] == nil {
					z.Commands[za0001][za0002] = new(Message)
				}
				bts, err = z.Commands[za0001][za0002].UnmarshalMsg(bts)
				if err != nil {
					err = msgp.WrapError(err, "Commands", za0001, za0002)
					return
				}
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *MessageReply) Msgsize() (s int) {
	s = 1 + msgp.ArrayHeaderSize
	for za0001 := range z.Commands {
		s += msgp.ArrayHeaderSize
		for za0002 := range z.Commands[za0001] {
			if z.Commands[za0001][za0002] == nil {
				s += msgp.NilSize
			} else {
				s += z.Commands[za0001][za0002].Msgsize()
			}
		}
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Open) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 2 {
		err = msgp.ArrayError{Wanted: 2, Got: zb0001}
		return
	}
	err = z.ID.DecodeMsg(dc)
	if err != nil {
		err = msgp.WrapError(err, "ID")
		return
	}
	z.StepInterval, err = dc.ReadInt()
	if err != nil {
		err = msgp.WrapError(err, "StepInterval")
		return
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Open) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 2
	err = en.Append(0x92)
	if err != nil {
		return
	}
	err = z.ID.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "ID")
		return
	}
	err = en.WriteInt(z.StepInterval)
	if err != nil {
		err = msgp.WrapError(err, "StepInterval")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Open) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 2
	o = append(o, 0x92)
	o, err = z.ID.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "ID")
		return
	}
	o = msgp.AppendInt(o, z.StepInterval)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Open) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 2 {
		err = msgp.ArrayError{Wanted: 2, Got: zb0001}
		return
	}
	bts, err = z.ID.UnmarshalMsg(bts)
	if err != nil {
		err = msgp.WrapError(err, "ID")
		return
	}
	z.StepInterval, bts, err = msgp.ReadIntBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "StepInterval")
		return
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Open) Msgsize() (s int) {
	s = 1 + z.ID.Msgsize() + msgp.IntSize
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Quit) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z Quit) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 0
	err = en.Append(0x80)
	if err != nil {
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z Quit) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 0
	o = append(o, 0x80)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Quit) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z Quit) Msgsize() (s int) {
	s = 1
	return
}

// DecodeMsg implements msgp.Decodable
func (z *QuitReply) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z QuitReply) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 0
	err = en.Append(0x80)
	if err != nil {
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z QuitReply) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 0
	o = append(o, 0x80)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *QuitReply) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z QuitReply) Msgsize() (s int) {
	s = 1
	return
}

// DecodeMsg implements msgp.Decodable
func (z *Start) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 1 {
		err = msgp.ArrayError{Wanted: 1, Got: zb0001}
		return
	}
	var zb0002 uint32
	zb0002, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err, "Players")
		return
	}
	if cap(z.Players) >= int(zb0002) {
		z.Players = (z.Players)[:zb0002]
	} else {
		z.Players = make([]string, zb0002)
	}
	for za0001 := range z.Players {
		z.Players[za0001], err = dc.ReadString()
		if err != nil {
			err = msgp.WrapError(err, "Players", za0001)
			return
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Start) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 1
	err = en.Append(0x91)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Players)))
	if err != nil {
		err = msgp.WrapError(err, "Players")
		return
	}
	for za0001 := range z.Players {
		err = en.WriteString(z.Players[za0001])
		if err != nil {
			err = msgp.WrapError(err, "Players", za0001)
			return
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Start) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 1
	o = append(o, 0x91)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Players)))
	for za0001 := range z.Players {
		o = msgp.AppendString(o, z.Players[za0001])
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Start) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 1 {
		err = msgp.ArrayError{Wanted: 1, Got: zb0001}
		return
	}
	var zb0002 uint32
	zb0002, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Players")
		return
	}
	if cap(z.Players) >= int(zb0002) {
		z.Players = (z.Players)[:zb0002]
	} else {
		z.Players = make([]string, zb0002)
	}
	for za0001 := range z.Players {
		z.Players[za0001], bts, err = msgp.ReadStringBytes(bts)
		if err != nil {
			err = msgp.WrapError(err, "Players", za0001)
			return
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Start) Msgsize() (s int) {
	s = 1 + msgp.ArrayHeaderSize
	for za0001 := range z.Players {
		s += msgp.StringPrefixSize + len(z.Players[za0001])
	}
	return
}

// DecodeMsg implements msgp.Decodable
func (z *System) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 1 {
		err = msgp.ArrayError{Wanted: 1, Got: zb0001}
		return
	}
	z.Message, err = dc.ReadString()
	if err != nil {
		err = msgp.WrapError(err, "Message")
		return
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z System) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 1
	err = en.Append(0x91)
	if err != nil {
		return
	}
	err = en.WriteString(z.Message)
	if err != nil {
		err = msgp.WrapError(err, "Message")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z System) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 1
	o = append(o, 0x91)
	o = msgp.AppendString(o, z.Message)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *System) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 1 {
		err = msgp.ArrayError{Wanted: 1, Got: zb0001}
		return
	}
	z.Message, bts, err = msgp.ReadStringBytes(bts)
	if err != nil {
		err = msgp.WrapError(err, "Message")
		return
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z System) Msgsize() (s int) {
	s = 1 + msgp.StringPrefixSize + len(z.Message)
	return
}

// DecodeMsg implements msgp.Decodable
func (z *TimeSync) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 1 {
		err = msgp.ArrayError{Wanted: 1, Got: zb0001}
		return
	}
	err = z.Client.DecodeMsg(dc)
	if err != nil {
		err = msgp.WrapError(err, "Client")
		return
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *TimeSync) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 1
	err = en.Append(0x91)
	if err != nil {
		return
	}
	err = z.Client.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Client")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *TimeSync) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 1
	o = append(o, 0x91)
	o, err = z.Client.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Client")
		return
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *TimeSync) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 1 {
		err = msgp.ArrayError{Wanted: 1, Got: zb0001}
		return
	}
	bts, err = z.Client.UnmarshalMsg(bts)
	if err != nil {
		err = msgp.WrapError(err, "Client")
		return
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *TimeSync) Msgsize() (s int) {
	s = 1 + z.Client.Msgsize()
	return
}

// DecodeMsg implements msgp.Decodable
func (z *TimeSyncReply) DecodeMsg(dc *msgp.Reader) (err error) {
	var zb0001 uint32
	zb0001, err = dc.ReadArrayHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 2 {
		err = msgp.ArrayError{Wanted: 2, Got: zb0001}
		return
	}
	err = z.Client.DecodeMsg(dc)
	if err != nil {
		err = msgp.WrapError(err, "Client")
		return
	}
	err = z.Server.DecodeMsg(dc)
	if err != nil {
		err = msgp.WrapError(err, "Server")
		return
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *TimeSyncReply) EncodeMsg(en *msgp.Writer) (err error) {
	// array header, size 2
	err = en.Append(0x92)
	if err != nil {
		return
	}
	err = z.Client.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Client")
		return
	}
	err = z.Server.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Server")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *TimeSyncReply) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// array header, size 2
	o = append(o, 0x92)
	o, err = z.Client.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Client")
		return
	}
	o, err = z.Server.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Server")
		return
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *TimeSyncReply) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadArrayHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	if zb0001 != 2 {
		err = msgp.ArrayError{Wanted: 2, Got: zb0001}
		return
	}
	bts, err = z.Client.UnmarshalMsg(bts)
	if err != nil {
		err = msgp.WrapError(err, "Client")
		return
	}
	bts, err = z.Server.UnmarshalMsg(bts)
	if err != nil {
		err = msgp.WrapError(err, "Server")
		return
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *TimeSyncReply) Msgsize() (s int) {
	s = 1 + z.Client.Msgsize() + z.Server.Msgsize()
	return
}
